using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Messaging.ServiceBus;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Logging;
using Trickle.Common.Configuration;
using Trickle.Common.Domain;
using Trickle.ContainerSecurity.Processors.CSharp;

namespace Trickle.ContainerSecurity.Interactors.CSharp
{
    /// <summary>
    /// Handles notification of container vulnerabilities
    /// </summary>
    public class VulnerabilityNotifier
    {
        private readonly ILogger<VulnerabilityNotifier> _logger;
        private readonly ITenantConfigurationProvider _tenantConfigProvider;
        private readonly HttpClient _httpClient;
        
        public VulnerabilityNotifier(
            ILogger<VulnerabilityNotifier> logger,
            ITenantConfigurationProvider tenantConfigProvider,
            HttpClient httpClient)
        {
            _logger = logger;
            _tenantConfigProvider = tenantConfigProvider;
            _httpClient = httpClient;
        }
        
        [Function("VulnerabilityNotifier")]
        public async Task Run(
            [ServiceBusTrigger("notifications", "container-vulnerability-notifier", Connection = "ServiceBusConnection")] 
            ServiceBusReceivedMessage message,
            FunctionContext context)
        {
            _logger.LogInformation("Processing vulnerability notification: {MessageId}", message.MessageId);
            
            try
            {
                // Extract event type
                var eventType = message.ApplicationProperties.TryGetValue("EventType", out var eventTypeObj)
                    ? eventTypeObj?.ToString()
                    : null;
                    
                if (string.IsNullOrEmpty(eventType) || eventType != nameof(VulnerabilityNotificationEvent))
                {
                    _logger.LogWarning("Skipping message with unexpected event type: {EventType}", eventType);
                    return;
                }
                
                // Parse the event
                var json = Encoding.UTF8.GetString(message.Body);
                var notificationEvent = JsonSerializer.Deserialize<VulnerabilityNotificationEvent>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (notificationEvent == null)
                {
                    _logger.LogError("Failed to deserialize VulnerabilityNotificationEvent");
                    return;
                }
                
                // Process the notification
                await ProcessNotificationAsync(notificationEvent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing notification: {MessageId}", message.MessageId);
                throw;
            }
        }
        
        /// <summary>
        /// Process the vulnerability notification
        /// </summary>
        private async Task ProcessNotificationAsync(VulnerabilityNotificationEvent notification)
        {
            try
            {
                // Get tenant configuration
                var tenantConfig = await _tenantConfigProvider.GetTenantConfigurationAsync<TenantNotificationConfig>(
                    notification.OwnerId);
                
                if (tenantConfig == null || !tenantConfig.IsConfigured())
                {
                    _logger.LogWarning("No notification configuration found for tenant {TenantId}", notification.OwnerId);
                    return;
                }
                
                // Track channels that were notified
                var channelsNotified = 0;
                
                // Send Teams notification if configured
                if (!string.IsNullOrEmpty(tenantConfig.TeamsWebhookUrl))
                {
                    await SendTeamsNotificationAsync(notification, tenantConfig);
                    channelsNotified++;
                }
                
                // Send email notification if configured
                if (!string.IsNullOrEmpty(tenantConfig.EmailRecipients))
                {
                    await SendEmailNotificationAsync(notification, tenantConfig);
                    channelsNotified++;
                }
                
                // Send Slack notification if configured
                if (!string.IsNullOrEmpty(tenantConfig.SlackWebhookUrl))
                {
                    await SendSlackNotificationAsync(notification, tenantConfig);
                    channelsNotified++;
                }
                
                _logger.LogInformation(
                    "Sent {NotificationType} notification for {CveId} to {ChannelCount} channels for tenant {TenantId}",
                    notification.NotificationType,
                    notification.CveId,
                    channelsNotified,
                    notification.OwnerId);
            }
            catch (Exception ex)
            {
                _logger.LogError(
                    ex,
                    "Error processing {NotificationType} notification for {CveId} for tenant {TenantId}",
                    notification.NotificationType,
                    notification.CveId,
                    notification.OwnerId);
                throw;
            }
        }
        
        /// <summary>
        /// Send notification to Microsoft Teams
        /// </summary>
        private async Task SendTeamsNotificationAsync(
            VulnerabilityNotificationEvent notification,
            TenantNotificationConfig tenantConfig)
        {
            try
            {
                _logger.LogDebug("Sending Teams notification for {CveId} to tenant {TenantId}",
                    notification.CveId, notification.OwnerId);
                
                // Create the Teams message
                var teamsMessage = CreateTeamsMessage(notification, tenantConfig);
                
                // Send to webhook
                var content = new StringContent(
                    JsonSerializer.Serialize(teamsMessage),
                    Encoding.UTF8,
                    "application/json");
                    
                var response = await _httpClient.PostAsync(tenantConfig.TeamsWebhookUrl, content);
                
                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    throw new Exception($"Teams webhook returned {response.StatusCode}: {errorContent}");
                }
                
                _logger.LogInformation("Successfully sent Teams notification for {CveId}",
                    notification.CveId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending Teams notification for {CveId}",
                    notification.CveId);
                throw;
            }
        }
        
        /// <summary>
        /// Send notification via email
        /// </summary>
        private async Task SendEmailNotificationAsync(
            VulnerabilityNotificationEvent notification,
            TenantNotificationConfig tenantConfig)
        {
            // In a real implementation, this would use SendGrid, SMTP, etc.
            // This is a placeholder implementation
            _logger.LogInformation("Would send email notification to {Recipients} for {CveId}",
                tenantConfig.EmailRecipients, notification.CveId);
                
            await Task.CompletedTask; // Placeholder
        }
        
        /// <summary>
        /// Send notification to Slack
        /// </summary>
        private async Task SendSlackNotificationAsync(
            VulnerabilityNotificationEvent notification,
            TenantNotificationConfig tenantConfig)
        {
            try
            {
                _logger.LogDebug("Sending Slack notification for {CveId} to tenant {TenantId}",
                    notification.CveId, notification.OwnerId);
                
                // Create the Slack message
                var slackMessage = CreateSlackMessage(notification, tenantConfig);
                
                // Send to webhook
                var content = new StringContent(
                    JsonSerializer.Serialize(slackMessage),
                    Encoding.UTF8,
                    "application/json");
                    
                var response = await _httpClient.PostAsync(tenantConfig.SlackWebhookUrl, content);
                
                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    throw new Exception($"Slack webhook returned {response.StatusCode}: {errorContent}");
                }
                
                _logger.LogInformation("Successfully sent Slack notification for {CveId}",
                    notification.CveId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending Slack notification for {CveId}",
                    notification.CveId);
                throw;
            }
        }
        
        /// <summary>
        /// Create Microsoft Teams message
        /// </summary>
        private object CreateTeamsMessage(
            VulnerabilityNotificationEvent notification,
            TenantNotificationConfig tenantConfig)
        {
            // Determine severity color
            string severityColor = GetSeverityColor(notification.Severity);
            
            // Create the adaptive card
            return new
            {
                type = "message",
                attachments = new[]
                {
                    new
                    {
                        contentType = "application/vnd.microsoft.card.adaptive",
                        content = new
                        {
                            type = "AdaptiveCard",
                            version = "1.3",
                            body = new object[]
                            {
                                new
                                {
                                    type = "TextBlock",
                                    size = "Large",
                                    weight = "Bolder",
                                    color = severityColor,
                                    text = GetNotificationTitle(notification)
                                },
                                new
                                {
                                    type = "TextBlock",
                                    wrap = true,
                                    text = GetNotificationDescription(notification)
                                },
                                new
                                {
                                    type = "FactSet",
                                    facts = new object[]
                                    {
                                        new { title = "CVE ID", value = notification.CveId },
                                        new { title = "Severity", value = $"{notification.Severity} (CVSS: {notification.CvssScore})" },
                                        new { title = "Container", value = notification.ContainerName },
                                        new { title = "Image", value = $"{notification.ImageName}:{notification.ImageTag}" },
                                        new { title = "Package", value = notification.AffectedPackage },
                                        new { title = "Installed Version", value = notification.InstalledVersion },
                                        new { title = "Fixed Version", value = notification.FixedVersion ?? "Not available" },
                                        new { title = "Fixable", value = notification.IsFixable ? "Yes" : "No" },
                                        new { title = "Cluster", value = notification.ClusterName },
                                        new { title = "Location", value = notification.Location }
                                    }
                                }
                            ],
                            actions = new object[]
                            {
                                new
                                {
                                    type = "Action.OpenUrl",
                                    title = "View Details",
                                    url = $"https://trickle.example.com/vulnerabilities/{notification.VulnerabilityId}"
                                },
                                new
                                {
                                    type = "Action.OpenUrl",
                                    title = "CVE Information",
                                    url = $"https://nvd.nist.gov/vuln/detail/{notification.CveId}"
                                }
                            }
                        }
                    }
                }
            };
        }
        
        /// <summary>
        /// Create Slack message
        /// </summary>
        private object CreateSlackMessage(
            VulnerabilityNotificationEvent notification,
            TenantNotificationConfig tenantConfig)
        {
            // Determine severity color
            string severityColor = GetSlackSeverityColor(notification.Severity);
            
            return new
            {
                attachments = new[]
                {
                    new
                    {
                        color = severityColor,
                        title = GetNotificationTitle(notification),
                        title_link = $"https://trickle.example.com/vulnerabilities/{notification.VulnerabilityId}",
                        text = GetNotificationDescription(notification),
                        fields = new object[]
                        {
                            new { title = "CVE ID", value = notification.CveId, @short = true },
                            new { title = "Severity", value = $"{notification.Severity} (CVSS: {notification.CvssScore})", @short = true },
                            new { title = "Container", value = notification.ContainerName, @short = true },
                            new { title = "Image", value = $"{notification.ImageName}:{notification.ImageTag}", @short = true },
                            new { title = "Package", value = notification.AffectedPackage, @short = true },
                            new { title = "Fixed Version", value = notification.FixedVersion ?? "Not available", @short = true },
                            new { title = "Cluster", value = notification.ClusterName, @short = true },
                            new { title = "Location", value = notification.Location, @short = true }
                        },
                        footer = "Trickle Container Security",
                        footer_icon = "https://example.com/trickle-icon.png",
                        ts = DateTimeOffset.UtcNow.ToUnixTimeSeconds()
                    }
                }
            };
        }
        
        /// <summary>
        /// Get notification title based on type
        /// </summary>
        private string GetNotificationTitle(VulnerabilityNotificationEvent notification)
        {
            return notification.NotificationType switch
            {
                "NewVulnerability" => $"New {notification.Severity} Vulnerability Detected",
                "SeverityIncrease" => $"Vulnerability Severity Increased: {notification.PreviousSeverity} -> {notification.Severity}",
                _ => $"Container Vulnerability: {notification.CveId}"
            };
        }
        
        /// <summary>
        /// Get notification description based on type
        /// </summary>
        private string GetNotificationDescription(VulnerabilityNotificationEvent notification)
        {
            return notification.NotificationType switch
            {
                "NewVulnerability" => 
                    $"A new {notification.Severity.ToLower()} severity vulnerability ({notification.CveId}) " +
                    $"was detected in container {notification.ContainerName} " +
                    $"running image {notification.ImageName}:{notification.ImageTag} " +
                    $"on cluster {notification.ClusterName}.",
                    
                "SeverityIncrease" => 
                    $"The severity of vulnerability {notification.CveId} has increased from " +
                    $"{notification.PreviousSeverity} to {notification.Severity} in container {notification.ContainerName} " +
                    $"running image {notification.ImageName}:{notification.ImageTag} " +
                    $"on cluster {notification.ClusterName}.",
                    
                _ => $"Vulnerability {notification.CveId} detected in container {notification.ContainerName}."
            };
        }
        
        /// <summary>
        /// Get color for Teams message based on severity
        /// </summary>
        private string GetSeverityColor(SecuritySeverity severity)
        {
            return severity switch
            {
                SecuritySeverity.Critical => "Attention",
                SecuritySeverity.High => "Warning",
                SecuritySeverity.Medium => "Accent",
                SecuritySeverity.Low => "Good",
                _ => "Default"
            };
        }
        
        /// <summary>
        /// Get color for Slack message based on severity
        /// </summary>
        private string GetSlackSeverityColor(SecuritySeverity severity)
        {
            return severity switch
            {
                SecuritySeverity.Critical => "#FF0000", // Red
                SecuritySeverity.High => "#FFA500",     // Orange
                SecuritySeverity.Medium => "#FFFF00",   // Yellow
                SecuritySeverity.Low => "#00FF00",      // Green
                _ => "#808080"                          // Gray
            };
        }
    }
    
    /// <summary>
    /// Tenant notification configuration
    /// </summary>
    public class TenantNotificationConfig
    {
        /// <summary>
        /// Microsoft Teams webhook URL
        /// </summary>
        public string TeamsWebhookUrl { get; set; }
        
        /// <summary>
        /// Email recipients (semicolon-separated)
        /// </summary>
        public string EmailRecipients { get; set; }
        
        /// <summary>
        /// Slack webhook URL
        /// </summary>
        public string SlackWebhookUrl { get; set; }
        
        /// <summary>
        /// Check if this tenant has notification configured
        /// </summary>
        public bool IsConfigured()
        {
            return !string.IsNullOrEmpty(TeamsWebhookUrl) ||
                   !string.IsNullOrEmpty(EmailRecipients) ||
                   !string.IsNullOrEmpty(SlackWebhookUrl);
        }
    }
}
