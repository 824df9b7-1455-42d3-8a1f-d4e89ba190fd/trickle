using System;
using System.Collections.Generic;
using Trickle.Common.Domain;

namespace Trickle.ContainerSecurity.Domain.Events
{
    /// <summary>
    /// Event raised when a container vulnerability is detected
    /// </summary>
    public class ContainerVulnerabilityEvent : SecurityEvent
    {
        /// <summary>
        /// CVE identifier
        /// </summary>
        public string CveId { get; set; }
        
        /// <summary>
        /// Vulnerability name
        /// </summary>
        public string VulnerabilityName { get; set; }
        
        /// <summary>
        /// CVSS score (0.0-10.0)
        /// </summary>
        public float CvssScore { get; set; }
        
        /// <summary>
        /// Container image name
        /// </summary>
        public string ImageName { get; set; }
        
        /// <summary>
        /// Container image tag
        /// </summary>
        public string ImageTag { get; set; }
        
        /// <summary>
        /// Kubernetes cluster ID
        /// </summary>
        public string ClusterId { get; set; }
        
        /// <summary>
        /// Kubernetes namespace
        /// </summary>
        public string Namespace { get; set; }
        
        /// <summary>
        /// Kubernetes node name
        /// </summary>
        public string NodeName { get; set; }
        
        /// <summary>
        /// Pod name if applicable
        /// </summary>
        public string PodName { get; set; }
        
        /// <summary>
        /// Container name
        /// </summary>
        public string ContainerName { get; set; }
        
        /// <summary>
        /// Vulnerability description
        /// </summary>
        public string Description { get; set; }
        
        /// <summary>
        /// Affected package
        /// </summary>
        public string AffectedPackage { get; set; }
        
        /// <summary>
        /// Installed version
        /// </summary>
        public string InstalledVersion { get; set; }
        
        /// <summary>
        /// Fixed version if available
        /// </summary>
        public string FixedVersion { get; set; }
        
        /// <summary>
        /// Link to more information
        /// </summary>
        public string InfoLink { get; set; }
        
        /// <summary>
        /// Fixable flag
        /// </summary>
        public bool IsFixable { get; set; }
        
        /// <summary>
        /// When the vulnerability was first detected
        /// </summary>
        public DateTime FirstDetectedAt { get; set; }
        
        /// <summary>
        /// Remediation guidance
        /// </summary>
        public string RemediationGuidance { get; set; }
        
        /// <summary>
        /// Override GetAdxProperties to include vulnerability-specific properties
        /// </summary>
        public override Dictionary<string, object> GetAdxProperties()
        {
            var properties = base.GetAdxProperties();
            
            // Add vulnerability-specific properties
            properties["CveId"] = CveId;
            properties["VulnerabilityName"] = VulnerabilityName;
            properties["CvssScore"] = CvssScore;
            properties["ImageName"] = ImageName;
            properties["ImageTag"] = ImageTag;
            properties["ClusterId"] = ClusterId;
            properties["Namespace"] = Namespace;
            properties["NodeName"] = NodeName;
            properties["PodName"] = PodName;
            properties["ContainerName"] = ContainerName;
            properties["AffectedPackage"] = AffectedPackage;
            properties["InstalledVersion"] = InstalledVersion;
            properties["FixedVersion"] = FixedVersion;
            properties["IsFixable"] = IsFixable;
            properties["FirstDetectedAt"] = FirstDetectedAt;
            
            return properties;
        }
        
        /// <summary>
        /// Override Validate to add validation for vulnerability-specific properties
        /// </summary>
        public override bool Validate(out List<string> validationErrors)
        {
            // Get base validation
            var isValid = base.Validate(out validationErrors);
            
            // Additional validation
            if (string.IsNullOrEmpty(CveId))
                validationErrors.Add("CveId is required");
                
            if (string.IsNullOrEmpty(ClusterId))
                validationErrors.Add("ClusterId is required");
                
            if (string.IsNullOrEmpty(ImageName))
                validationErrors.Add("ImageName is required");
                
            return validationErrors.Count == 0;
        }
    }
}
